name: Deploy to Azure Container Apps

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY_NAME: foresomeregistry.azurecr.io
  IMAGE_NAME: foresum
  RESOURCE_GROUP: foresome-rg
  CONTAINER_APP_NAME: foresum-app
  CONTAINER_APP_ENV: foresum-env

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}
        username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
        password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

    - name: Build and push Docker image
      run: |
        IMAGE_TAG=v${{ github.run_number }}
        echo "Building image: ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
        docker build \
          --build-arg NEXT_PUBLIC_SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" \
          --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
          --build-arg NEXT_PUBLIC_GOOGLE_MAPS_API_KEY="${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}" \
          -t ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} .
        docker tag ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
        docker push ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Container App
      run: |
        echo "Deploying Container App with image tag: ${{ env.IMAGE_TAG }}"
        az containerapp update \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
          --set-env-vars \
            NEXT_PUBLIC_SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" \
            NODE_ENV=production \
            HOSTNAME=0.0.0.0 \
            PORT=80 \
            DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
            NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL }}" \
            GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
            GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
            SUPABASE_SERVICE_ROLE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            NEXT_PUBLIC_GOOGLE_MAPS_API_KEY="${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}"

    - name: Get Container App URL
      run: |
        echo "Waiting for revision to be ready..."
        sleep 15
        CONTAINER_APP_URL=$(az containerapp show \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv)
        echo "---"
        echo "Deployment complete! ðŸš€"
        echo "Container App URL: https://${CONTAINER_APP_URL}"
        echo "Production URL: https://foresumgolf.com"

    - name: Show Container App logs
      if: always()
      run: |
        echo "Fetching Container App logs..."
        az containerapp logs show \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --tail 50 \
          || echo "Could not fetch logs"
